{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","subject","host","port","rooms","Name","LightOn","label","topic","client","messages","connected","startConnect","clientID","parseInt","Math","random","pahoMqtt","Client","Number","console","log","onConnectionLost","onMessageArrived","connect","onSuccess","onConnect","useSSL","setState","i","length","subscribe","responseObject","errorCode","errorMessage","changeLight","destination","payload","room_name","substring","indexOf","map","r","toggleLight","roomName","lightOn","find","r2","publish","message","payloadString","destinationName","startDisconnect","disconnect","Container","fluid","className","Row","Col","Button","variant","this","disabled","onClick","xs","type","name","id","checked","onChange","htmlFor","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.825eeae3.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport pahoMqtt from \"paho-mqtt/paho-mqtt\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\nclass App extends Component {\r\n  state = {\r\n    subject: \"VirtualSmartHome/\",\r\n    host: \"broker.emqx.io\",\r\n    port: \"8084\",\r\n    // host: \"broker.mqttdashboard.com\",\r\n    // port: \"8000\",\r\n    rooms: [\r\n      { Name: \"Bedroom\", LightOn: false, label: \"Bedroom (2nd Floor)\" },\r\n      { Name: \"Hallway\", LightOn: false, label: \"Hallway (2nd Floor)\" },\r\n      { Name: \"Library\", LightOn: false, label: \"Library (2nd Floor)\" },\r\n      { Name: \"Bathroom\", LightOn: false, label: \"Bathroom (1st Floor)\" },\r\n      { Name: \"F1_Stairs\", LightOn: false, label: \"Stairs (1st Floor)\" },\r\n      { Name: \"LivingRoom\", LightOn: false, label: \"Living Room (1st Floor)\" },\r\n      { Name: \"Garage\", LightOn: false, label: \"Garage (Ground Floor)\" },\r\n      { Name: \"GF_Stairs\", LightOn: false, label: \"Stairs (Ground Floor)\" },\r\n      { Name: \"Kitchen\", LightOn: false, label: \"Kitchen (Ground Floor)\" },\r\n      { Name: \"DiningRoom\", LightOn: false, label: \"Dining Room (Ground Floor)\" },\r\n      { Name: \"Basement\", LightOn: false, label: \"Basement\" },\r\n    ],\r\n    topic: \"\",\r\n    client: {},\r\n    messages: [],\r\n    connected: false,\r\n  };\r\n\r\n  // Called after form input is processed\r\n  startConnect = () => {\r\n    // Generate a random client ID\r\n    let clientID = \"clientID-\" + parseInt(Math.random() * 100);\r\n\r\n    const client = new pahoMqtt.Client(this.state.host, Number(this.state.port), clientID);\r\n    console.log(client);\r\n    // Initialize new Paho client connection\r\n\r\n    // Set callback handlers\r\n    client.onConnectionLost = this.onConnectionLost;\r\n    client.onMessageArrived = this.onMessageArrived;\r\n\r\n    // Connect the client, if successful, call onConnect function\r\n    client.connect({\r\n      onSuccess: this.onConnect,\r\n      useSSL: true,\r\n    });\r\n    this.setState({ client });\r\n  };\r\n\r\n  // Called when the client connects\r\n  onConnect = () => {\r\n    for (let i = 0; i < this.state.rooms.length; i++) {\r\n      let topic = `${this.state.subject}${this.state.rooms[i].Name}/Light`;\r\n      this.state.client.subscribe(topic);\r\n    }\r\n    this.setState({ connected: true });\r\n  };\r\n\r\n  // Called when the client loses its connection\r\n  onConnectionLost = (responseObject) => {\r\n    console.log(\"onConnectionLost: Connection Lost\");\r\n    if (responseObject.errorCode !== 0) {\r\n      console.log(\"onConnectionLost: \" + responseObject.errorMessage);\r\n    }\r\n    this.setState({ connected: false });\r\n  };\r\n\r\n  changeLight = (destination, payload) => {\r\n    let room_name = destination.substring(this.state.subject.length, destination.indexOf(\"/Light\"));\r\n    console.log(\"Payload\", payload);\r\n    console.log(\"Room Name\", room_name);\r\n    console.log(\"State\", this.state);\r\n    console.log(\"destination\", destination);\r\n    const rooms = this.state.rooms.map((r) => {\r\n      if (r.Name === room_name) {\r\n        r.LightOn = payload === \"1\";\r\n        console.log(\"Room\", r);\r\n      }\r\n      return r;\r\n    });\r\n    this.setState({ rooms });\r\n  };\r\n\r\n  toggleLight = (roomName) => {\r\n    if (!this.state.connected) return;\r\n    let lightOn = this.state.rooms.find((r2) => r2.Name === roomName).LightOn;\r\n\r\n    this.state.client.publish(`${this.state.subject}${roomName}/Light`, !lightOn ? \"1\" : \"0\", 0, true);\r\n  };\r\n\r\n  // Called when a message arrives\r\n  onMessageArrived = (message) => {\r\n    console.log(\"onMessageArrived: \" + message.payloadString);\r\n\r\n    this.changeLight(message.destinationName, message.payloadString);\r\n  };\r\n\r\n  // Called when the disconnection button is pressed\r\n  startDisconnect = () => {\r\n    this.state.client.disconnect();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid={true} className=\"text-center\">\r\n        <Row className=\"py-4\">\r\n          <Col>\r\n            <h1>PrivIoT</h1>\r\n            <h2>Virtual Smart Home</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"my-5\">\r\n          <Col>\r\n            <Button variant={this.state.connected ? \"success\" : \"danger\"} disabled={this.state.connected} onClick={() => this.startConnect()}>\r\n              Connect\r\n            </Button>\r\n            <Button variant=\"primary\" disabled={!this.state.connected} onClick={() => this.startDisconnect()}>\r\n              Disconnect\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        {this.state.rooms.map((r) => (\r\n          <Row key={r.Name}>\r\n            <Col xs=\"6\" className=\"text-right\">\r\n              {r.label}\r\n            </Col>\r\n            <Col xs=\"2\">\r\n              <div className=\"toggleWrapper\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name={`toggle_${r.Name}`}\r\n                  className=\"mobileToggle\"\r\n                  id={`toggle_${r.Name}`}\r\n                  checked={this.state.rooms.find((r2) => r2.Name === r.Name).LightOn}\r\n                  onChange={() => this.toggleLight(r.Name)}\r\n                />\r\n                <label htmlFor={`toggle_${r.Name}`}></label>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        ))}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}